name: üöÄ Manual Repository Update

on:
  workflow_dispatch:
    inputs:
      target_user:
        description: 'GitHub username to fetch stars from'
        required: false
        default: ''
        type: string
      analysis_mode:
        description: 'Analysis mode'
        required: true
        default: 'fast'
        type: choice
        options:
          - fast
          - full
          - test
      update_type:
        description: 'Update type'
        required: true
        default: 'incremental'
        type: choice
        options:
          - incremental
          - full-refresh
          - categories-only
          - markdown-only
      categories_filter:
        description: 'Comma-separated list of categories to update (optional)'
        required: false
        default: ''
        type: string
      min_stars:
        description: 'Minimum stars threshold for repositories'
        required: false
        default: '10'
        type: string
      max_repos:
        description: 'Maximum number of repositories to process'
        required: false
        default: '1000'
        type: string
      force_commit:
        description: 'Force commit even if no changes detected'
        required: false
        default: false
        type: boolean
      create_backup:
        description: 'Create backup before update'
        required: false
        default: true
        type: boolean
      notify_on_completion:
        description: 'Create issue notification on completion'
        required: false
        default: false
        type: boolean

env:
  PYTHON_VERSION: '3.9'
  CACHE_PREFIX: v2-manual

permissions:
  contents: write
  actions: read
  issues: write

jobs:
  validate-inputs:
    name: ‚úÖ Validate Inputs
    runs-on: ubuntu-latest
    
    outputs:
      validated: ${{ steps.validate.outputs.validated }}
      target-user: ${{ steps.validate.outputs.target-user }}
      min-stars: ${{ steps.validate.outputs.min-stars }}
      max-repos: ${{ steps.validate.outputs.max-repos }}
    
    steps:
      - name: üîç Validate Inputs
        id: validate
        run: |
          # Validate target user
          if [ -n "${{ github.event.inputs.target_user }}" ]; then
            TARGET_USER="${{ github.event.inputs.target_user }}"
          else
            TARGET_USER="${{ github.repository_owner }}"
          fi
          echo "target-user=$TARGET_USER" >> $GITHUB_OUTPUT
          
          # Validate min_stars
          MIN_STARS="${{ github.event.inputs.min_stars }}"
          if ! [[ "$MIN_STARS" =~ ^[0-9]+$ ]] || [ "$MIN_STARS" -lt 0 ]; then
            echo "::error::Invalid min_stars value: $MIN_STARS"
            exit 1
          fi
          echo "min-stars=$MIN_STARS" >> $GITHUB_OUTPUT
          
          # Validate max_repos
          MAX_REPOS="${{ github.event.inputs.max_repos }}"
          if ! [[ "$MAX_REPOS" =~ ^[0-9]+$ ]] || [ "$MAX_REPOS" -lt 1 ] || [ "$MAX_REPOS" -gt 10000 ]; then
            echo "::error::Invalid max_repos value: $MAX_REPOS (must be 1-10000)"
            exit 1
          fi
          echo "max-repos=$MAX_REPOS" >> $GITHUB_OUTPUT
          
          echo "validated=true" >> $GITHUB_OUTPUT
          
          # Log validation results
          echo "## üìã Input Validation Results" >> $GITHUB_STEP_SUMMARY
          echo "- **Target User:** $TARGET_USER" >> $GITHUB_STEP_SUMMARY
          echo "- **Analysis Mode:** ${{ github.event.inputs.analysis_mode }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Update Type:** ${{ github.event.inputs.update_type }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Min Stars:** $MIN_STARS" >> $GITHUB_STEP_SUMMARY
          echo "- **Max Repos:** $MAX_REPOS" >> $GITHUB_STEP_SUMMARY
          
          if [ -n "${{ github.event.inputs.categories_filter }}" ]; then
            echo "- **Categories Filter:** ${{ github.event.inputs.categories_filter }}" >> $GITHUB_STEP_SUMMARY
          fi

  backup:
    name: üíæ Create Backup
    runs-on: ubuntu-latest
    needs: [validate-inputs]
    if: github.event.inputs.create_backup == 'true'
    
    steps:
      - name: üèÅ Checkout Repository
        uses: actions/checkout@v4
      
      - name: üíæ Create Data Backup
        run: |
          BACKUP_DIR="backup_$(date +%Y%m%d_%H%M%S)"
          mkdir -p "$BACKUP_DIR"
          
          # Backup data files
          if [ -d "data/" ]; then
            cp -r data/ "$BACKUP_DIR/"
            echo "‚úÖ Data directory backed up"
          fi
          
          # Backup markdown output
          if [ -d "markdown_output/" ]; then
            cp -r markdown_output/ "$BACKUP_DIR/"
            echo "‚úÖ Markdown output backed up"
          fi
          
          # Create backup archive
          tar -czf "${BACKUP_DIR}.tar.gz" "$BACKUP_DIR"
          rm -rf "$BACKUP_DIR"
          
          # Store as artifact
          echo "BACKUP_FILE=${BACKUP_DIR}.tar.gz" >> $GITHUB_ENV
          
          echo "## üíæ Backup Created" >> $GITHUB_STEP_SUMMARY
          echo "- **Backup File:** ${BACKUP_DIR}.tar.gz" >> $GITHUB_STEP_SUMMARY
          echo "- **Size:** $(du -h ${BACKUP_DIR}.tar.gz | cut -f1)" >> $GITHUB_STEP_SUMMARY
      
      - name: üì¶ Upload Backup Artifact
        uses: actions/upload-artifact@v3
        with:
          name: data-backup-${{ github.run_number }}
          path: ${{ env.BACKUP_FILE }}
          retention-days: 30

  manual-update:
    name: üîÑ Execute Manual Update
    runs-on: ubuntu-latest
    needs: [validate-inputs]
    timeout-minutes: 45
    
    outputs:
      changes-detected: ${{ steps.check-changes.outputs.changes-detected }}
      total-repos: ${{ steps.stats.outputs.total-repos }}
      categories-count: ${{ steps.stats.outputs.categories-count }}
      update-summary: ${{ steps.summary.outputs.summary }}
    
    steps:
      - name: üèÅ Checkout Repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0
      
      - name: üêç Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'
      
      - name: üì¶ Cache Dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.cache/pip
            ~/.cache/huggingface
            venv/
          key: ${{ env.CACHE_PREFIX }}-${{ runner.os }}-python-${{ env.PYTHON_VERSION }}-${{ hashFiles('requirements.txt') }}-${{ github.event.inputs.analysis_mode }}
          restore-keys: |
            ${{ env.CACHE_PREFIX }}-${{ runner.os }}-python-${{ env.PYTHON_VERSION }}-
            v2-${{ runner.os }}-python-${{ env.PYTHON_VERSION }}-
      
      - name: üõ†Ô∏è Install Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          
          # Verify installation
          python -c "
          import github, pandas, numpy, sklearn, tqdm, click
          print('‚úÖ All packages installed successfully')
          "
      
      - name: üåü Fetch Repositories
        if: github.event.inputs.update_type == 'incremental' || github.event.inputs.update_type == 'full-refresh'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          cd tools
          
          echo "üîç Fetching starred repositories for: ${{ needs.validate-inputs.outputs.target-user }}"
          
          # Build fetch command
          FETCH_CMD="python fetch_stars.py --verbose"
          FETCH_CMD="$FETCH_CMD --user ${{ needs.validate-inputs.outputs.target-user }}"
          FETCH_CMD="$FETCH_CMD --min-stars ${{ needs.validate-inputs.outputs.min-stars }}"
          FETCH_CMD="$FETCH_CMD --max-repos ${{ needs.validate-inputs.outputs.max-repos }}"
          FETCH_CMD="$FETCH_CMD --output ../data/starred_repos_latest.json"
          
          # Add categories filter if specified
          if [ -n "${{ github.event.inputs.categories_filter }}" ]; then
            FETCH_CMD="$FETCH_CMD --categories '${{ github.event.inputs.categories_filter }}'"
          fi
          
          echo "üöÄ Running: $FETCH_CMD"
          eval $FETCH_CMD 2>&1 | tee fetch_manual.log
          
          if [ $? -ne 0 ]; then
            echo "::error::Failed to fetch repositories"
            cat fetch_manual.log
            exit 1
          fi
          
          # Validate output
          python -c "
          import json
          try:
              with open('../data/starred_repos_latest.json') as f:
                  data = json.load(f)
              repo_count = len(data.get('repositories', []))
              print(f'‚úÖ Successfully fetched {repo_count} repositories')
              if repo_count == 0:
                  print('‚ö†Ô∏è Warning: No repositories found')
          except Exception as e:
              print(f'‚ùå Error validating output: {e}')
              exit(1)
          "
      
      - name: üß† Analyze Repositories
        if: |
          github.event.inputs.update_type == 'incremental' || 
          github.event.inputs.update_type == 'full-refresh' || 
          github.event.inputs.update_type == 'categories-only'
        run: |
          cd tools
          
          echo "üß† Starting repository analysis..."
          
          # Build analysis command
          ANALYZE_CMD="python analyze_repos.py --verbose"
          
          # Set analysis mode
          case "${{ github.event.inputs.analysis_mode }}" in
            "fast")
              ANALYZE_CMD="$ANALYZE_CMD --no-embeddings"
              echo "üèÉ Using fast mode (rule-based only)"
              ;;
            "full")
              echo "üß† Using full mode (with embeddings)"
              ;;
            "test")
              ANALYZE_CMD="$ANALYZE_CMD --no-embeddings --test-mode"
              echo "üß™ Using test mode"
              ;;
          esac
          
          # Add categories filter if specified
          if [ -n "${{ github.event.inputs.categories_filter }}" ]; then
            ANALYZE_CMD="$ANALYZE_CMD --categories '${{ github.event.inputs.categories_filter }}'"
          fi
          
          echo "üöÄ Running: $ANALYZE_CMD"
          eval $ANALYZE_CMD 2>&1 | tee analyze_manual.log
          
          if [ $? -ne 0 ]; then
            echo "::error::Analysis failed"
            cat analyze_manual.log
            exit 1
          fi
          
          # Validate analysis output
          python -c "
          import json
          try:
              with open('../data/categorized_repos.json') as f:
                  data = json.load(f)
              
              categories = data.get('categories', {})
              metadata = data.get('metadata', {})
              
              print(f'‚úÖ Analysis completed successfully')
              print(f'   Categories: {len(categories)}')
              print(f'   Total repos: {metadata.get(\"total_repositories\", \"unknown\")}')
              
              if len(categories) == 0:
                  print('‚ö†Ô∏è Warning: No categories generated')
          except Exception as e:
              print(f'‚ùå Error validating analysis: {e}')
              exit(1)
          "
      
      - name: üìù Generate Markdown
        if: |
          github.event.inputs.update_type == 'incremental' || 
          github.event.inputs.update_type == 'full-refresh' || 
          github.event.inputs.update_type == 'markdown-only'
        run: |
          cd tools
          
          echo "üìù Generating markdown files..."
          
          # Build markdown command
          MARKDOWN_CMD="python generate_markdown.py --verbose"
          
          # Add categories filter if specified
          if [ -n "${{ github.event.inputs.categories_filter }}" ]; then
            MARKDOWN_CMD="$MARKDOWN_CMD --categories '${{ github.event.inputs.categories_filter }}'"
          fi
          
          echo "üöÄ Running: $MARKDOWN_CMD"
          eval $MARKDOWN_CMD 2>&1 | tee generate_manual.log
          
          if [ $? -ne 0 ]; then
            echo "::error::Markdown generation failed"
            cat generate_manual.log
            exit 1
          fi
          
          echo "‚úÖ Markdown generation completed"
      
      - name: üìä Extract Statistics
        id: stats
        run: |
          echo "üìä Extracting update statistics..."
          
          # Extract statistics from analysis
          if [ -f "data/categorized_repos.json" ]; then
            STATS=$(python -c "
            import json
            try:
                with open('data/categorized_repos.json') as f:
                    data = json.load(f)
                metadata = data.get('metadata', {})
                categories = data.get('categories', {})
                print(f'total-repos={metadata.get(\"total_repositories\", 0)}')
                print(f'categories-count={len(categories)}')
                print(f'analysis-mode=${{ github.event.inputs.analysis_mode }}')
                print(f'update-type=${{ github.event.inputs.update_type }}')
            except Exception as e:
                print(f'total-repos=0')
                print(f'categories-count=0')
                print(f'error=true')
            ")
            
            echo "$STATS" >> $GITHUB_OUTPUT
          else
            echo "total-repos=0" >> $GITHUB_OUTPUT
            echo "categories-count=0" >> $GITHUB_OUTPUT
          fi
          
          # Count changed files
          CHANGED_FILES=$(git diff --name-only | wc -l)
          echo "changed-files=$CHANGED_FILES" >> $GITHUB_OUTPUT
      
      - name: üîç Check for Changes
        id: check-changes
        run: |
          echo "üîç Checking for changes..."
          
          # Stage all changes first
          git add -A
          
          # Check for changes
          if git diff --cached --quiet; then
            echo "changes-detected=false" >> $GITHUB_OUTPUT
            echo "‚ÑπÔ∏è No changes detected"
          else
            echo "changes-detected=true" >> $GITHUB_OUTPUT
            echo "‚úÖ Changes detected"
            
            # Show summary of changes
            echo "üìù Changed files:" >> $GITHUB_STEP_SUMMARY
            git diff --cached --name-only | head -20 >> $GITHUB_STEP_SUMMARY
            
            TOTAL_CHANGES=$(git diff --cached --numstat | wc -l)
            echo "Total files changed: $TOTAL_CHANGES" >> $GITHUB_STEP_SUMMARY
          fi
      
      - name: üìã Create Update Summary
        id: summary
        run: |
          SUMMARY_FILE="update_summary_$(date +%Y%m%d_%H%M%S).md"
          
          cat > "$SUMMARY_FILE" << EOF
          # üöÄ Manual Repository Update Summary
          
          **Timestamp:** $(date -u '+%Y-%m-%d %H:%M:%S UTC')
          **Workflow Run:** #${{ github.run_number }}
          **Triggered by:** @${{ github.actor }}
          
          ## üìä Configuration
          - **Target User:** ${{ needs.validate-inputs.outputs.target-user }}
          - **Analysis Mode:** ${{ github.event.inputs.analysis_mode }}
          - **Update Type:** ${{ github.event.inputs.update_type }}
          - **Min Stars:** ${{ needs.validate-inputs.outputs.min-stars }}
          - **Max Repos:** ${{ needs.validate-inputs.outputs.max-repos }}
          
          ## üìà Results
          - **Total Repositories:** ${{ steps.stats.outputs.total-repos }}
          - **Categories Generated:** ${{ steps.stats.outputs.categories-count }}
          - **Changed Files:** ${{ steps.stats.outputs.changed-files }}
          - **Changes Detected:** ${{ steps.check-changes.outputs.changes-detected }}
          
          ## üîß Filters Applied
          EOF
          
          if [ -n "${{ github.event.inputs.categories_filter }}" ]; then
            echo "- **Categories Filter:** ${{ github.event.inputs.categories_filter }}" >> "$SUMMARY_FILE"
          else
            echo "- **Categories Filter:** All categories included" >> "$SUMMARY_FILE"
          fi
          
          cat >> "$SUMMARY_FILE" << EOF
          
          ## üîç Processing Details
          - **Backup Created:** ${{ github.event.inputs.create_backup }}
          - **Force Commit:** ${{ github.event.inputs.force_commit }}
          - **Notification Requested:** ${{ github.event.inputs.notify_on_completion }}
          
          ---
          *Generated by GitHub Actions*
          EOF
          
          echo "summary-file=$SUMMARY_FILE" >> $GITHUB_OUTPUT
          
          # Also output as step summary
          cat "$SUMMARY_FILE" >> $GITHUB_STEP_SUMMARY
      
      - name: üöÄ Commit Changes
        if: |
          (steps.check-changes.outputs.changes-detected == 'true' || github.event.inputs.force_commit == 'true')
        run: |
          # Configure git
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          
          # Create detailed commit message
          COMMIT_MSG="üöÄ Manual repository update by @${{ github.actor }}
          
          Update Configuration:
          - Target: ${{ needs.validate-inputs.outputs.target-user }}
          - Mode: ${{ github.event.inputs.analysis_mode }}
          - Type: ${{ github.event.inputs.update_type }}
          - Repos: ${{ steps.stats.outputs.total-repos }}
          - Categories: ${{ steps.stats.outputs.categories-count }}
          
          Run Details:
          - Workflow: ${{ github.workflow }}
          - Run ID: ${{ github.run_id }}
          - Timestamp: $(date -u '+%Y-%m-%d %H:%M UTC')
          
          ü§ñ Manual execution via GitHub Actions"
          
          # Ensure files are staged
          git add -A
          
          # Commit changes
          git commit -m "$COMMIT_MSG" || echo "No changes to commit"
          
          # Push with retry logic
          max_retries=3
          retry_count=0
          
          while [ $retry_count -lt $max_retries ]; do
            if git push origin main; then
              echo "‚úÖ Successfully pushed changes"
              break
            else
              retry_count=$((retry_count + 1))
              if [ $retry_count -lt $max_retries ]; then
                echo "‚ö†Ô∏è Push failed, retrying... (attempt $retry_count/$max_retries)"
                sleep 5
                git pull --rebase origin main
              else
                echo "::error::Failed to push after $max_retries attempts"
                exit 1
              fi
            fi
          done
      
      - name: üì¶ Upload Summary Artifact
        uses: actions/upload-artifact@v3
        with:
          name: update-summary-${{ github.run_number }}
          path: ${{ steps.summary.outputs.summary-file }}
          retention-days: 30

  notify:
    name: üì¢ Send Notifications
    runs-on: ubuntu-latest
    needs: [manual-update]
    if: always() && (github.event.inputs.notify_on_completion == 'true' || failure())
    
    steps:
      - name: üì¢ Create Completion Issue
        if: github.event.inputs.notify_on_completion == 'true' && success()
        uses: actions/github-script@v7
        with:
          script: |
            const title = `‚úÖ Manual Update Completed - ${new Date().toISOString().split('T')[0]}`;
            const body = `
            ## ‚úÖ Manual Repository Update Completed Successfully
            
            **Executed by:** @${{ github.actor }}
            **Workflow Run:** [#${{ github.run_number }}](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})
            **Timestamp:** ${new Date().toISOString()}
            
            ### üìä Update Results
            - **Total Repositories:** ${{ needs.manual-update.outputs.total-repos }}
            - **Categories Generated:** ${{ needs.manual-update.outputs.categories-count }}
            - **Changes Detected:** ${{ needs.manual-update.outputs.changes-detected }}
            - **Analysis Mode:** ${{ github.event.inputs.analysis_mode }}
            - **Update Type:** ${{ github.event.inputs.update_type }}
            
            ### üîß Configuration Used
            - **Target User:** ${{ needs.validate-inputs.outputs.target-user }}
            - **Min Stars:** ${{ needs.validate-inputs.outputs.min-stars }}
            - **Max Repos:** ${{ needs.validate-inputs.outputs.max-repos }}
            
            ${github.event.inputs.categories_filter ? '- **Categories Filter:** ' + github.event.inputs.categories_filter : ''}
            
            ### üìÅ Artifacts Generated
            - Update summary report
            ${github.event.inputs.create_backup === 'true' ? '- Data backup archive' : ''}
            
            ---
            ü§ñ This notification was automatically generated.
            `;
            
            await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: title,
              body: body,
              labels: ['manual-update', 'completed', 'automated']
            });
      
      - name: üö® Create Failure Issue
        if: failure()
        uses: actions/github-script@v7
        with:
          script: |
            const title = `üö® Manual Update Failed - ${new Date().toISOString().split('T')[0]}`;
            const body = `
            ## ‚ùå Manual Repository Update Failed
            
            **Executed by:** @${{ github.actor }}
            **Workflow Run:** [#${{ github.run_number }}](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})
            **Timestamp:** ${new Date().toISOString()}
            
            ### ‚öôÔ∏è Configuration Used
            - **Target User:** ${{ needs.validate-inputs.outputs.target-user }}
            - **Analysis Mode:** ${{ github.event.inputs.analysis_mode }}
            - **Update Type:** ${{ github.event.inputs.update_type }}
            - **Min Stars:** ${{ needs.validate-inputs.outputs.min-stars }}
            - **Max Repos:** ${{ needs.validate-inputs.outputs.max-repos }}
            
            ### üîç Debugging Steps
            1. Check the [workflow logs](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}) for detailed error information
            2. Verify GitHub token permissions
            3. Check if target user exists and is accessible
            4. Validate input parameters
            
            ### üõ†Ô∏è Manual Recovery
            \`\`\`bash
            # Try running locally
            cd tools
            python fetch_stars.py --user ${{ needs.validate-inputs.outputs.target-user }} --verbose
            python analyze_repos.py --no-embeddings --verbose
            python generate_markdown.py --verbose
            \`\`\`
            
            ---
            ü§ñ This issue was created automatically. Please investigate and resolve.
            `;
            
            await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: title,
              body: body,
              labels: ['manual-update', 'bug', 'priority-high', 'needs-investigation']
            });